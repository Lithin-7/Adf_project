{
	"name": "Transformations",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "airline_src",
						"type": "DatasetReference"
					},
					"name": "DimAirline"
				},
				{
					"dataset": {
						"referenceName": "flight_src",
						"type": "DatasetReference"
					},
					"name": "DimFlight"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "Dimpassenger"
				},
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "sqlsrc"
				},
				{
					"dataset": {
						"referenceName": "dimairport",
						"type": "DatasetReference"
					},
					"name": "github"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				},
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sink3"
				},
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sink4"
				},
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sink5"
				}
			],
			"transformations": [
				{
					"name": "derivedColumncountry"
				},
				{
					"name": "selectcolumns"
				},
				{
					"name": "cast1"
				},
				{
					"name": "derivedfirstname"
				},
				{
					"name": "derivedlastname"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "alterRow2"
				},
				{
					"name": "alterRow3"
				},
				{
					"name": "alterRow4"
				},
				{
					"name": "alterRow5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          airline_id as short,",
				"          airline_name as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimAirline",
				"source(output(",
				"          flight_id as short,",
				"          flight_number as string,",
				"          departure_time as string,",
				"          arrival_time as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimFlight",
				"source(output(",
				"          passenger_id as string,",
				"          name as string,",
				"          gender as string,",
				"          nationality as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Dimpassenger",
				"source(output(",
				"          booking_id as integer,",
				"          passenger_id as integer,",
				"          flight_id as integer,",
				"          airline_id as integer,",
				"          origin_airport_id as integer,",
				"          destination_airport_id as integer,",
				"          booking_date as date,",
				"          ticket_cost as decimal(10,2),",
				"          flight_duration_mins as integer,",
				"          checkin_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> sqlsrc",
				"source(output(",
				"          airport_id as short,",
				"          airport_name as string,",
				"          city as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> github",
				"DimAirline derive(country = upper(country)) ~> derivedColumncountry",
				"DimFlight select(mapColumn(",
				"          flight_id,",
				"          flight_number,",
				"          departure_timestamp = departure_time,",
				"          arrival_timestamp = arrival_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcolumns",
				"sqlsrc cast(output(",
				"          ticket_cost as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"Dimpassenger derive(first_name = split(name,\" \")[1]) ~> derivedfirstname",
				"derivedfirstname derive(last_name = split(name, \" \")[2]) ~> derivedlastname",
				"derivedColumncountry alterRow(upsertIf(1==1)) ~> alterRow1",
				"selectcolumns alterRow(upsertIf(1==1)) ~> alterRow2",
				"derivedlastname alterRow(upsertIf(1==1)) ~> alterRow3",
				"cast1 alterRow(upsertIf(1==1)) ~> alterRow4",
				"github alterRow(upsertIf(1==1)) ~> alterRow5",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'dimairline',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'dimflight',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"alterRow3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'Dimpassenger',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3",
				"alterRow4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'sql',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink4",
				"alterRow5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'git',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink5"
			]
		}
	}
}