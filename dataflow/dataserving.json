{
	"name": "dataserving",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "dimFlight"
				},
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "dimAirline"
				},
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "FactBookings"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "factAirline"
				},
				{
					"name": "selectcols"
				},
				{
					"name": "groupby"
				},
				{
					"name": "Ranking"
				},
				{
					"name": "Top5"
				},
				{
					"name": "flightFact"
				},
				{
					"name": "selectcol"
				},
				{
					"name": "flightcost"
				},
				{
					"name": "denserank"
				},
				{
					"name": "Top"
				},
				{
					"name": "alterRow"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          flight_id as short,",
				"          flight_number as string,",
				"          departure_timestamp as string,",
				"          arrival_timestamp as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'dimflight') ~> dimFlight",
				"source(output(",
				"          airline_id as short,",
				"          airline_name as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'dimairline') ~> dimAirline",
				"source(output(",
				"          booking_id as integer,",
				"          passenger_id as integer,",
				"          flight_id as integer,",
				"          airline_id as integer,",
				"          origin_airport_id as integer,",
				"          destination_airport_id as integer,",
				"          booking_date as date,",
				"          ticket_cost as integer,",
				"          flight_duration_mins as integer,",
				"          checkin_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'sql') ~> FactBookings",
				"FactBookings, dimAirline join(FactBookings@airline_id == dimAirline@airline_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> factAirline",
				"factAirline select(mapColumn(",
				"          booking_id,",
				"          passenger_id,",
				"          flight_id,",
				"          airline_id = FactBookings@airline_id,",
				"          origin_airport_id,",
				"          destination_airport_id,",
				"          booking_date,",
				"          ticket_cost,",
				"          flight_duration_mins,",
				"          checkin_status,",
				"          airline_name,",
				"          country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcols",
				"selectcols aggregate(groupBy(airline_name),",
				"     Total_sales = sum(ticket_cost)) ~> groupby",
				"groupby window(desc(Total_sales, true),",
				"     Ranking = denseRank()) ~> Ranking",
				"Ranking filter(Ranking < 6) ~> Top5",
				"dimFlight, FactBookings join(dimFlight@flight_id == FactBookings@flight_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> flightFact",
				"flightFact select(mapColumn(",
				"          flight_id = dimFlight@flight_id,",
				"          flight_number,",
				"          departure_timestamp,",
				"          arrival_timestamp,",
				"          booking_id,",
				"          passenger_id,",
				"          airline_id,",
				"          origin_airport_id,",
				"          destination_airport_id,",
				"          booking_date,",
				"          ticket_cost,",
				"          flight_duration_mins,",
				"          checkin_status",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcol",
				"flightFact aggregate(groupBy(flight_number),",
				"     total_sales = sum(ticket_cost)) ~> flightcost",
				"flightcost window(desc(total_sales, true),",
				"     Ranking = denseRank()) ~> denserank",
				"denserank filter(Ranking < 6) ~> Top",
				"Top alterRow(insertIf(1==1)) ~> alterRow",
				"Top5 alterRow(insertIf(1==1)) ~> alterRow1",
				"alterRow sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'gold',",
				"     folderPath: 'Flightfact',",
				"     overwrite: true,",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     keys:['flight_number'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'gold',",
				"     folderPath: 'FactAirline',",
				"     overwrite: true,",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     keys:['airline_name'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}